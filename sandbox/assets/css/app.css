/* See the Tailwind configuration guide for advanced usage
   https://tailwindcss.com/docs/configuration */

@import "tailwindcss" source(none);
@source "../css";
@source "../js";
@source "../../lib/sandbox_web";

/* A Tailwind plugin that makes "hero-#{ICON}" classes available.
   The heroicons installation itself is managed by your mix.exs */
@plugin "../vendor/heroicons";

/* daisyUI Tailwind Plugin. You can update this file by fetching the latest version with:
   curl -sLO https://github.com/saadeghi/daisyui/releases/latest/download/daisyui.js
   Make sure to look at the daisyUI changelog: https://daisyui.com/docs/changelog/ */
@plugin "../vendor/daisyui" {
  themes: corporate --default, business --prefersdark;
}

/* Add variants based on LiveView classes */
@custom-variant phx-click-loading (.phx-click-loading&, .phx-click-loading &);
@custom-variant phx-submit-loading (.phx-submit-loading&, .phx-submit-loading &);
@custom-variant phx-change-loading (.phx-change-loading&, .phx-change-loading &);

/* Use the data attribute for dark mode  */
@custom-variant dark (&:where([data-phx-theme*=dark], [data-phx-theme*=dark] *));

/* Make LiveView wrapper divs transparent for layout */
[data-phx-session],
[data-phx-teleported-src] {
  display: contents
}

/* This file is for your main application CSS */

/* App Styles
All styles for the main public application using Pax.Interface to build CRUD interfaces.

This is not how the admin pages are styled, that's done by Pax.Admin's "admin.css" file included in its own
root.html.heex.

This uses DaisyUI for basic styling by applying DaisyUI classes to the existing .pax-* classes that are
from the default Pax components. This is the easiest way to customize the style of your Pax CRUD interface.

If you're not using Tailwind, another options is to just define all of the CSS yourself, such as

    .pax-index-table {
        border-collapse: collapse;
        border-spacing: 0;
        width: 100%;
        border: 1px solid #ddd;
    }

Another option is to provide your own custom components instead of the Pax Components, which would allow you
to change the structure of the HTML as well as add the tailwind utility classes directly. This is a lot of work,
but it is the most flexible option.
*/

/* Pax.Components */

.pax-link {
  @apply link;
}

.pax-link.disabled {
  @apply link-neutral;
}

.pax-button {
  @apply btn;
}

.pax-button-primary {
  @apply btn-primary;
}

.pax-button-secondary {
  @apply btn-ghost;
}

.pax-button-tertiary {
  @apply btn-ghost;
}

.pax-select {
  @apply select;
}

.pax-input {
  @apply input;
}

/* Pax.Interface.Components */

.pax-index-header,
.pax-detail-header {
  @apply pb-2 border-b items-end border-neutral-300 dark:border-neutral-700;
}

/* Pax.Field.Components */

.pax-field-control-input {
  @apply input w-full;
}

.pax-field-control-input.has-errors {
  @apply input-error;
}

.pax-field-control-checkbox {
  @apply checkbox;
}

.pax-field-errors {
  @apply mt-2
}

.pax-field-error {
  @apply text-error;
}

/* Plugins */

.pax-index-table {
  @apply table;
}

.pax-index-table-row {
  @apply hover:bg-base-200;
}

.pax-detail-fieldsets-field-label {
  @apply label;
}

.pax-detail-list-field-label {
  @apply label whitespace-normal;
}

.pax-pagination-page-select {
  @apply w-16;
}

.pax-pagination-page-select.has-errors {
  @apply input-error;
}

.pax-pagination-page-input {
  @apply w-16;
}

.pax-pagination-page-input.has-errors {
  @apply input-error;
}
